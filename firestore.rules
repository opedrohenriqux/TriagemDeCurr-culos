rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // JOBS: Public can read, only admins can write.
    match /jobs/{jobId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // CANDIDATES: Anyone can create (apply). Only admins or the candidate themselves can read/update.
    // Note: The current app logic for status checks doesn't authenticate the candidate, so they can't read their own data yet.
    // This rule is prepared for a future where candidates might log in. For now, only admins can manage this.
    match /candidates/{candidateId} {
      allow create: if true; // Anyone can submit an application
      allow read, update: if isAdmin(); // Only admins can see and modify all candidate data
      allow delete: if isAdmin();
    }

    // USERS: Only admins can read all users. A user can read/update their own data.
    match /users/{userId} {
      allow read, update: if isAdmin() || isOwner(userId);
      allow create, delete: if isAdmin();
    }

    // TALENT POOL, HISTORY: Only admins can access.
    match /talentPool/{talentId} {
      allow read, write: if isAdmin();
    }
    match /history/{eventId} {
      allow read, write: if isAdmin();
    }

    // DYNAMICS: Any authenticated user can read (for candidate view), but only admins can write.
    match /dynamics/{dynamicId} {
      allow read: if request.auth != null;
      allow write: if isAdmin();
    }

    // APP STATE: Used for shared state like the active timer. Authenticated users can read/write.
    match /appState/{stateId} {
      allow read, write: if request.auth != null;
    }

    // MESSAGES: Only participants in the conversation can read or write.
    match /messages/{messageId} {
      // Allow read if the authenticated user's ID is part of the sender or receiver ID string.
      // e.g., senderId could be 'user-UID' or 'candidate-CANDIDATE_ID'
      allow read: if request.auth != null &&
                   (request.resource.data.senderId.matches('.*' + request.auth.uid + '.*') ||
                    request.resource.data.receiverId.matches('.*' + request.auth.uid + '.*'));

      // Allow creation if the senderId string contains the authenticated user's UID.
      allow create: if request.auth != null &&
                     request.resource.data.senderId.matches('.*' + request.auth.uid + '.*');

      // Allow update/delete only if the user was the original sender.
      allow update, delete: if request.auth != null &&
                             resource.data.senderId.matches('.*' + request.auth.uid + '.*');
    }
  }
}